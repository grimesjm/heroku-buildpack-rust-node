#!/bin/bash


echo "-----> Building the backend"

# Find all the directories we might need (based on
# heroku-buildpack-nodejs code).
BUILD_DIR=${1:-}/backend
CACHE_DIR=${2:-}/backend
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

# Export DATABASE_URL at build time, mostly because Diesel is the best way to
# do SQL in Rust right now, and Diesel will use it to generate code for the
# database schema.
if [ -e "$ENV_DIR/DATABASE_URL" ]; then
  export DATABASE_URL="$(cat $ENV_DIR/DATABASE_URL)";
fi

# Set defaults for our configuration variables.  Stable Rust is sufficiently
# stable at this point that I think we can just default it.
VERSION=stable

# Set this to "1" in `RustConfig` to just install a Rust toolchain and not
# build `Cargo.toml`.  This is useful if you have a project written in Ruby
# or Node (for example) that needs to build extension modules using Rust.
RUST_SKIP_BUILD=0
# If your Rust code is not at the root directory of the repository, specify a
# `BUILD_PATH` to the correct directory in the `RustConfig`
BUILD_PATH=""
# Set this to "1" in `RustConfig` to install diesel at build time and copy it
# into the target directory, next to your app binary. This makes it easy to
# run migrations by adding a release step to your Procfile:
# `release: ./target/release/diesel migration run`
RUST_INSTALL_DIESEL=0
# These flags are passed to `cargo install diesel`, e.g. '--no-default-features --features postgres'
DIESEL_FLAGS=""

# Load our toolchain configuration, if any was specified.
if [ -f "$BUILD_DIR/rust-toolchain" ]; then
    VERSION="$(cat "$BUILD_DIR/rust-toolchain")"
fi

# Load our configuration variables, if any were specified.
if [ -f "$BUILD_DIR/RustConfig" ]; then
    . "$BUILD_DIR/RustConfig"
fi

# Standard paranoia.
set -eu

# Check our configuration options.
if [ -z ${VERSION+x} ]; then
  >&2 echo "failed: must set VERSION with rust-toolchain or RustConfig to indicate the Rust version."
  exit 1
fi

# Notify users running old, unstable versions of Rust about how to deploy
# successfully.
if [ $RUST_SKIP_BUILD -ne 1  ] && ( [ ! -z ${CARGO_URL+x} ] || [ ! -f "$BUILD_DIR/$BUILD_PATH/Cargo.toml" ] ); then
    >&2 cat <<EOF
To deploy a modern Rust app, make sure you have a Cargo.toml file, and that
you do not define CARGO_URL or CARGO_VERSION in RustConfig.  If you're
using an older version of Rust, and you need to re-deploy an existing
application, try setting your buildpack to:

  https://github.com/emk/heroku-buildpack-rust.git#old-rust
EOF
    exit 1
fi

# Handle people who still aren't using Rustup.
if [ ! -z ${URL+x} ]; then
    >&2 cat <<EOF
heroku-pack-rust has switched to using rustup.  You no longer need a
URL field in RustConfig. Instead, you should just specify a
rustup-compatible version (such as `1.11`, `stable` or `nighty`) in VERSION.
EOF
    exit 1
fi

# Record our Rust build environment configuration in an export file, in
# case another buildpack needs it to build Ruby gems that use Rust or
# something like that.
cat <<EOF > $BP_DIR/export
# Our rustup installation.
export RUSTUP_HOME="$CACHE_DIR/multirust"

# Our cargo installation.  We implicitly trust Rustup and Cargo
# to do the right thing when new versions are released.
export CARGO_HOME="$CACHE_DIR/cargo"

# Include binaries installed by cargo and rustup in our path.
PATH="\$CARGO_HOME/bin:\$PATH"
EOF

# Read our build environment back in and evaluate it so that we can use it.
. $BP_DIR/export

# Switch to our cache directory.
mkdir -p "$CACHE_DIR"
cd "$CACHE_DIR"

# Make sure we have an appropriate Rust toolchain installed.
if [ -d "$CARGO_HOME" ]; then
    echo "-----> Checking for new releases of Rust $VERSION channel"
    # It's possible that $VERSION has changed, or the `stable` channel has updated.
    rustup self update
    rustup update "$VERSION"
    rustup default "$VERSION"
else
    echo "-----> Downloading rustup"
    curl https://sh.rustup.rs -sSf > rustup.sh
    chmod u+x rustup.sh
    echo "-----> Using rustup to install Rust channel $VERSION"
    ./rustup.sh -y --default-toolchain "$VERSION"
    rm rustup.sh
fi
if [ ! -x "$CARGO_HOME/bin/rustc" ]; then
  echo "failed: Cannot find Rust binaries at $CARGO_HOME"
  exit 1
fi

# This is where we will cache our Rust output.  Note the suggestions at
# https://github.com/alexcrichton/cargo/commit/014765f788ca1c2476936835ca32cc2746f99b42
# which describe how this needs to be named.
export CARGO_TARGET_DIR="$CACHE_DIR/target"

if [ $RUST_SKIP_BUILD -ne 1 ]; then
  # Build our project (into CARGO_TARGET_DIR so we have caching) and copy it
  # back to the source tree.  In theory, we could probably just copy the
  # binary or do something clever with `cargo install`, but we haven't
  # figured that out yet.
  #
  # To debug git issues:
  #export RUST_LOG="cargo::sources::git=debug"
  # To debug compiler and linking issues, add `--verbose`.
  echo "-----> Building application using Cargo"
  cd "$BUILD_DIR/$BUILD_PATH"
  rm -rf target/
  cargo build --release
  mkdir -p target/release
  find "$CARGO_TARGET_DIR/release" -maxdepth 1 -type f -executable -exec cp -a -t $BUILD_DIR/build/backend/target/release {} \;
else
  echo "-----> Skipping Cargo build"
fi

# Install diesel so we can use it for migrations
if [ $RUST_INSTALL_DIESEL -eq 1 ]; then
  echo "-----> Installing diesel"
  cargo install diesel_cli $DIESEL_FLAGS || echo "already installed"
  cp $(which diesel) $BUILD_DIR/build/backend/target/release/
fi

echo "-----> Building the frontend"

#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Constants

# This is used by the buildpack stdlib for metrics
# shellcheck disable=SC2034
BPLOG_PREFIX="buildpack.nodejs"

### Configure directories

BUILD_DIR=${1:-}/frontend
CACHE_DIR=${2:-}/frontend
ENV_DIR=${3:-}
BP_DIR=$(cd "$(dirname "${0:-}")"; cd ..; pwd)
STDLIB_FILE=$(mktemp -t stdlib.XXXXX)

### Load dependencies

curl --silent --retry 5 --retry-max-time 15 'https://lang-common.s3.amazonaws.com/buildpack-stdlib/v7/stdlib.sh' > "$STDLIB_FILE"
# shellcheck source=/dev/null
source "$STDLIB_FILE"
# shellcheck source=lib/output.sh
source "$BP_DIR/lib/output.sh"
# shellcheck source=lib/monitor.sh
source "$BP_DIR/lib/monitor.sh"
# shellcheck source=lib/environment.sh
source "$BP_DIR/lib/environment.sh"
# shellcheck source=lib/failure.sh
source "$BP_DIR/lib/failure.sh"
# shellcheck source=lib/binaries.sh
source "$BP_DIR/lib/binaries.sh"
# shellcheck source=lib/json.sh
source "$BP_DIR/lib/json.sh"
# shellcheck source=lib/cache.sh
source "$BP_DIR/lib/cache.sh"
# shellcheck source=lib/dependencies.sh
source "$BP_DIR/lib/dependencies.sh"
# shellcheck source=lib/plugin.sh
source "$BP_DIR/lib/plugin.sh"
# shellcheck source=lib/kvstore.sh
source "$BP_DIR/lib/kvstore.sh"
# shellcheck source=lib/metadata.sh
source "$BP_DIR/lib/metadata.sh"
# shellcheck source=lib/build-data.sh
source "$BP_DIR/lib/build-data.sh"

export PATH="$BUILD_DIR/.heroku/node/bin:$BUILD_DIR/.heroku/yarn/bin":$PATH

LOG_FILE=$(mktemp -t node-build-log.XXXXX)
echo "" > "$LOG_FILE"

### Handle errors

handle_failure() {
  header "Build failed"
  fail_yarn_outdated "$LOG_FILE"
  fail_yarn_lockfile_outdated "$LOG_FILE"
  fail_node_install "$LOG_FILE" "$BUILD_DIR"
  fail_yarn_install "$LOG_FILE" "$BUILD_DIR"
  fail_invalid_semver "$LOG_FILE"
  log_other_failures "$LOG_FILE"
  warn_untracked_dependencies "$LOG_FILE"
  warn_angular_resolution "$LOG_FILE"
  warn_missing_devdeps "$LOG_FILE" "$BUILD_DIR"
  warn_econnreset "$LOG_FILE"
  failure_message | output "$LOG_FILE"
}
trap 'handle_failure' ERR

### Initalize metadata store
bd_create "$CACHE_DIR"

### Check initial state

[ -e "$BUILD_DIR/node_modules" ] && PREBUILD=true || PREBUILD=false
[ -f "$BUILD_DIR/yarn.lock" ] && YARN=true || YARN=false
[ -f "$BUILD_DIR/package-lock.json" ] && NPM_LOCK=true || NPM_LOCK=false

### Save build info
log_initial_state

### Failures that should be caught immediately

fail_dot_heroku "$BUILD_DIR"
fail_dot_heroku_node "$BUILD_DIR"
fail_invalid_package_json "$BUILD_DIR"
fail_multiple_lockfiles "$BUILD_DIR"
warn_prebuilt_modules "$BUILD_DIR"
warn_missing_package_json "$BUILD_DIR"

### Behavior flags
[ ! "$NEW_BUILD_SCRIPT_BEHAVIOR" ] && NEW_BUILD_SCRIPT_BEHAVIOR=$(read_json "$BUILD_DIR/package.json" ".[\"heroku-run-build-script\"]")
warn_build_script_behavior_opt_in "$NEW_BUILD_SCRIPT_BEHAVIOR" | output "$LOG_FILE"
log_build_script_opt_in "$NEW_BUILD_SCRIPT_BEHAVIOR"

### Compile

create_env() {
  write_profile "$BP_DIR" "$BUILD_DIR"
  write_export "$BP_DIR" "$BUILD_DIR"
  export_env_dir "$ENV_DIR"
  create_default_env
}

header "Creating runtime environment" | output "$LOG_FILE"

mkdir -p "$BUILD_DIR/.heroku/node/"
cd "$BUILD_DIR"
create_env # can't pipe the whole thing because piping causes subshells, preventing exports
list_node_config | output "$LOG_FILE"
create_build_env

### Configure package manager cache directories
[ ! "$YARN_CACHE_FOLDER" ] && YARN_CACHE_FOLDER=$(mktemp -d -t yarncache.XXXXX)
[ ! "$NPM_CONFIG_CACHE" ] && NPM_CONFIG_CACHE=$(mktemp -d -t npmcache.XXXXX)
export YARN_CACHE_FOLDER NPM_CONFIG_CACHE

install_bins() {
  local node_engine iojs_engine npm_engine yarn_engine npm_version node_version

  node_engine=$(read_json "$BUILD_DIR/package.json" ".engines.node")
  iojs_engine=$(read_json "$BUILD_DIR/package.json" ".engines.iojs")
  npm_engine=$(read_json "$BUILD_DIR/package.json" ".engines.npm")
  yarn_engine=$(read_json "$BUILD_DIR/package.json" ".engines.yarn")

  bd_set "node-version-request" "$node_engine"
  bd_set "npm-version-request" "$npm_engine"
  bd_set "yarn-version-request" "$yarn_engine"

  bd_set "node-version-request" "$node_engine"
  bd_set "npm-version-request" "$npm_engine"
  bd_set "yarn-version-request" "$yarn_engine"

  if [ -n "$iojs_engine" ]; then
    echo "engines.iojs (package.json):  $iojs_engine (iojs)"
  else
    echo "engines.node (package.json):  ${node_engine:-unspecified}"
  fi
  echo "engines.npm (package.json):   ${npm_engine:-unspecified (use default)}"
  if $YARN; then
    echo "engines.yarn (package.json):  ${yarn_engine:-unspecified (use default)}"
  fi
  echo ""

  if [ -n "$iojs_engine" ]; then
    warn_node_engine "$iojs_engine"
    install_iojs "$iojs_engine" "$BUILD_DIR/.heroku/node" "$(get_platform)"
    npm_version="$(npm --version)"
    node_version="$(node --version)"
    echo "Using bundled npm version for iojs compatibility: $npm_version"
    mcount "version.iojs.$node_version"
  else
    warn_node_engine "$node_engine"
    monitor "install-node-binary" install_nodejs "$node_engine" "$BUILD_DIR/.heroku/node" "$(get_platform)"
    monitor "install-npm-binary" install_npm "$npm_engine" "$BUILD_DIR/.heroku/node" $NPM_LOCK
    node_version="$(node --version)"
    mcount "version.node.$node_version"
    bd_set "node-version" "$node_version"
  fi

  # Download yarn if there is a yarn.lock file or if the user
  # has specified a version of yarn under "engines". We'll still
  # only install using yarn if there is a yarn.lock file
  if $YARN || [ -n "$yarn_engine" ]; then
    monitor "install-yarn-binary" install_yarn "$BUILD_DIR/.heroku/yarn" "$yarn_engine" "$(get_platform)"
  fi

  if $YARN; then
    mcount "version.yarn.$(yarn --version)"
    bd_set "yarn-version" "$(yarn --version)"
  else
    mcount "version.npm.$(npm --version)"
    bd_set "npm-version" "$(npm --version)"
  fi

  warn_old_npm
}

header "Installing binaries" | output "$LOG_FILE"
install_bins | output "$LOG_FILE"

restore_cache() {
  local cache_status cache_directories

  cache_status="$(get_cache_status "$CACHE_DIR")"
  cache_directories="$(get_cache_directories "$BUILD_DIR")"

  if $YARN; then
    if [ -e "$BUILD_DIR/node_modules" ]; then
      warn "node_modules checked into source control" "https://blog.heroku.com/node-habits-2016#9-only-git-the-important-bits"
      rm -rf "$BUILD_DIR/node_modules"
    fi
  fi

  if [[ "$cache_status" == "disabled" ]]; then
    header "Restoring cache"
    echo "Caching has been disabled because NODE_MODULES_CACHE=${NODE_MODULES_CACHE}"
  elif [[ "$cache_status" == "valid" ]]; then
    header "Restoring cache"
    if [[ "$cache_directories" == "" ]]; then
      restore_default_cache_directories "$BUILD_DIR" "$CACHE_DIR"
    else
      restore_custom_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$cache_directories"
    fi
  elif [[ "$cache_status" == "new-signature" ]]; then
    header "Restoring cache"
    if [[ "$cache_directories" == "" ]]; then
      echo "Cached directories were not restored due to a change in version of node, npm, yarn or stack"
      echo "Module installation may take longer for this build"
    else
      # If the user has specified custom cache directories, be more explicit
      echo "Invalidating cache due to a change in version of node, npm, yarn or stack"
      echo "Will not restore the following directories for this build:"
      for directory in $cache_directories; do
        echo "  $directory"
      done
    fi
  else
    # No cache exists, be silent
    :
  fi

  mcount "cache.$cache_status"
  bd_set "cache-status" "$cache_status"
}

restore_cache | output "$LOG_FILE"

build_dependencies() {
  local cache_status start

  run_if_present "$BUILD_DIR" 'heroku-prebuild'

  cache_status="$(get_cache_status "$CACHE_DIR")"
  start=$(nowms)

  if $YARN; then
    yarn_node_modules "$BUILD_DIR"
  elif $PREBUILD; then
    echo "Prebuild detected (node_modules already exists)"
    npm_rebuild "$BUILD_DIR"
  else
    npm_node_modules "$BUILD_DIR"
  fi

  mtime "modules.time.cache.$cache_status" "${start}"

  if [[ "$NEW_BUILD_SCRIPT_BEHAVIOR" = true ]]; then
    mcount "build-script.new-behavior"
    run_build_script "$BUILD_DIR"
  else
    mcount "build-script.legacy-behavior"
    run_if_present "$BUILD_DIR" 'heroku-postbuild'
  fi

  log_build_scripts "$BUILD_DIR"
}

header "Building dependencies" | output "$LOG_FILE"
build_dependencies | output "$LOG_FILE"

cache_build() {
  local cache_directories
  cache_directories="$(get_cache_directories "$BUILD_DIR")"

  clear_cache "$CACHE_DIR"
  if ! ${NODE_MODULES_CACHE:-true}; then
    # we've already warned that caching is disabled in the restore step
    # so be silent here
    :
  elif [[ "$cache_directories" == "" ]]; then
    header "Caching build"
    save_default_cache_directories "$BUILD_DIR" "$CACHE_DIR"
  else
    header "Caching build"
    save_custom_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$cache_directories"
  fi
  save_signature "$CACHE_DIR"
}

cache_build | output "$LOG_FILE"

prune_devdependencies() {
  if $YARN; then
    yarn_prune_devdependencies "$BUILD_DIR"
  else
    npm_prune_devdependencies "$BUILD_DIR"
  fi
}

header "Pruning devDependencies" | output "$LOG_FILE"
prune_devdependencies | output "$LOG_FILE"

summarize_build() {
  if $NODE_VERBOSE; then
    list_dependencies "$BUILD_DIR"
  fi

  mmeasure 'modules.size' "$(measure_size)"
  bd_set "node-modules-size" "$(measure_size)"
}

install_plugin "$BP_DIR" "$BUILD_DIR"

header "Build succeeded!" | output "$LOG_FILE"
mcount "compile"
summarize_build | output "$LOG_FILE"
bd_set "node-build-success" "true"

warn_no_start "$BUILD_DIR"
warn_unmet_dep "$LOG_FILE"
warn_old_npm_lockfile $NPM_LOCK

log_build_data >> "$BUILDPACK_LOG_FILE"




